# Rules in this file were initially inferred by Visual Studio IntelliCode from the C:\Projekty\ImoAmlWashClub\src\ImoAmlWashClub.Web\Server\ codebase based on best match to current usage at 24.09.2020
# You can modify the rules from these initially generated values to suit your own policies
# You can learn more about editorconfig here: https://docs.microsoft.com/en-us/visualstudio/ide/editorconfig-code-style-settings-reference
[*.cs]


#Core editorconfig formatting - indentation

#Formatting - new line options

#require braces to be on a new line for methods, lambdas, object_collection_array_initializers, control_blocks, and types (also known as "Allman" style)
csharp_new_line_before_open_brace = all

#Formatting - organize using options

#sort System.* using directives alphabetically, and place them before other usings
dotnet_sort_system_directives_first = true

#Formatting - wrapping options


#Style - Code block preferences

#prefer curly braces even for one line of code - návrh na warnning?
csharp_prefer_braces = true:suggestion

#Style - expression bodied member options

#prefer block bodies for constructors
csharp_style_expression_bodied_constructors = false:suggestion
#prefer block bodies for methods
csharp_style_expression_bodied_methods = false:suggestion

#Style - expression level options



#prefer the language keyword for member access expressions, instead of the type name, for types that have a keyword to represent them - návrh na warnning?
dotnet_style_predefined_type_for_member_access = true:suggestion

#Style - Expression-level  preferences

#prefer inferred anonymous type member names
dotnet_style_prefer_inferred_anonymous_type_member_names = false:suggestion

#Style - implicit and explicit types

#prefer var over explicit type in all cases, unless overridden by another code style rule
csharp_style_var_elsewhere = true:suggestion

#prefer var is used to declare variables with built-in system types such as int
csharp_style_var_for_built_in_types = true:suggestion

#prefer var when the type is already mentioned on the right-hand side of a declaration expression
csharp_style_var_when_type_is_apparent = true:warning

#Style - language keyword and framework type options

#prefer the language keyword for local variables, method parameters, and class members, instead of the type name, for types that have a keyword to represent them
dotnet_style_predefined_type_for_locals_parameters_members = true:suggestion

#Style - modifier options

#prefer accessibility modifiers to be declared except for public interface members. This will currently not differ from always and will act as future proofing for if C# adds default interface methods.
dotnet_style_require_accessibility_modifiers = always:warning

#Style - Modifier preferences

#when this rule is set to a list of modifiers, prefer the specified ordering.
csharp_preferred_modifier_order = public,private,protected,internal,static,extern,new,virtual,abstract,sealed,override,readonly,unsafe,volatile,async:warning

#Style - qualification options

#prefer fields not to be prefaced with this. or Me. in Visual Basic
dotnet_style_qualification_for_field = true:warning

#prefer methods not to be prefaced with this. or Me. in Visual Basic
dotnet_style_qualification_for_method = true:warning

#prefer properties not to be prefaced with this. or Me. in Visual Basic
dotnet_style_qualification_for_property = false:warning

#Prefer that fields should be marked with readonly
dotnet_style_readonly_field = true:warning

#Prefer parentheses to clarify relational operator (>, <, <=, >=, is, as, ==, !=) precedence
dotnet_style_parentheses_in_relational_binary_operators = always_for_clarity

# Prefer parentheses to clarify other binary operator (&&, ||, ??) precedence
dotnet_style_parentheses_in_other_binary_operators = always_for_clarity

#Prefer objects to be initialized using object initializers when possible
dotnet_style_object_initializer = true:warning

#Prefer tuple names to ItemX properties
dotnet_style_explicit_tuple_names = true:warning

#Prefer using a null check with pattern-matching over object.ReferenceEquals
dotnet_style_prefer_is_null_check_over_reference_equality_method = true:warning

#Prefer assignments with a ternary conditional over an if-else statement
dotnet_style_prefer_conditional_expression_over_assignment = true:warning

#Prefer return statements to use a ternary conditional over an if-else statement
dotnet_style_prefer_conditional_expression_over_return = false:warning

#Prefer compound assignment expressions
dotnet_style_prefer_compound_assignment = true:warning

#Prefer null coalescing expressions to ternary operator checking
dotnet_style_coalesce_expression = true:warning

#Prefer to use null-conditional operator when possible
dotnet_style_null_propagation = true:warning

dotnet_code_quality_unused_parameters = all:warning

csharp_using_directive_placement = outside_namespace:warning
dotnet_diagnostic.CA1507.severity=warning
dotnet_diagnostic.CA2016.severity=warning
[*.{cs,vb}]
dotnet_diagnostic.CA1806.severity=warning
dotnet_diagnostic.CA1821.severity=warning
dotnet_diagnostic.CA1827.severity=warning
dotnet_diagnostic.CA1828.severity=warning
dotnet_diagnostic.CA2012.severity=warning
dotnet_diagnostic.CA2009.severity=warning